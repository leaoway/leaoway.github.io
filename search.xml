<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>maven编译的时候跳过test</title>
    <url>/2020/11/02/maven%E7%BC%96%E8%AF%91%E7%9A%84%E6%97%B6%E5%80%99%E8%B7%B3%E8%BF%87test/</url>
    <content><![CDATA[<p>有2种方式<br>方式1：用命令带上参数<br>mvn install -Dmaven.test.skip=true</p>
<p>方式2：在pom.xml里面配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>mavan</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle mybatis java.sql.SQLException: 流已被关闭问题</title>
    <url>/2020/11/02/oracle-mybatis-java-sql-SQLException-%E6%B5%81%E5%B7%B2%E8%A2%AB%E5%85%B3%E9%97%AD%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>oracle 表字段类型为LONG RAW时，mysql生成BaseResultMap时，必须按照表字段顺序生成，不然会报java.sql.SQLException: 流已被关闭问题的异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;result column=<span class="string">&quot;IMAGE&quot;</span> jdbcType=<span class="string">&quot;LONGVARBINARY&quot;</span> property=<span class="string">&quot;image&quot;</span> typeHandler=<span class="string">&quot;com.leaoway.handler.LongVarBinaryHandler&quot;</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">&quot;STATUS&quot;</span> jdbcType=<span class="string">&quot;VARCHAR&quot;</span> property=<span class="string">&quot;status&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>而且，需要新增一个typeHandler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">public class LongVarBinaryHandler implements TypeHandler&lt;byte[]&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LongVarBinaryHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, <span class="keyword">byte</span>[] bytes, JdbcType jdbcType)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getResult(ResultSet resultSet, String s) <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] result = resultSet.getBytes(s);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getResult(ResultSet resultSet, <span class="keyword">int</span> i) <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] result = resultSet.getBytes(i);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getResult(CallableStatement callableStatement, <span class="keyword">int</span> i) <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[ <span class="number">0</span> ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>oracle</tag>
        <tag>mybatis</tag>
        <tag>SQLException</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot elasticsearch集成</title>
    <url>/2020/11/03/springboot-elasticsearch%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<p>1.首先引入依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>2.在application.yml中增加es配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">rest:</span></span><br><span class="line">      <span class="attr">uris:</span> <span class="string">http://127.0.0.1:9200</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="string">1s</span></span><br><span class="line">      <span class="attr">read-timeout:</span> <span class="string">30s</span></span><br></pre></td></tr></table></figure>

<p>3.查询代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SearchHits <span class="title">query</span><span class="params">(SearchReqVo searchReqVo)</span></span>&#123;</span><br><span class="line">  			<span class="comment">//分页</span></span><br><span class="line">        Pageable pageable = PageRequest.of(searchReqVo.getPageNo() - <span class="number">1</span>, searchReqVo.getPageSize());</span><br><span class="line">        NativeSearchQueryBuilder searchQueryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder().withPageable(pageable);</span><br><span class="line">  			<span class="comment">// bool查询条件     </span></span><br><span class="line">  			BoolQueryBuilder boolQueryBuilder = <span class="keyword">new</span> BoolQueryBuilder()</span><br><span class="line">                .filter(QueryBuilders.termQuery(<span class="string">&quot;status&quot;</span>, StatusEnum.UP.getCode()))</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(searchReqVo.getKeyword())) &#123;</span><br><span class="line">            boolQueryBuilder.must(QueryBuilders.matchQuery(<span class="string">&quot;productName&quot;</span>, searchReqVo.getKeyword()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(searchReqVo.getCategoryType())) &#123;</span><br><span class="line">            boolQueryBuilder.must(QueryBuilders.termQuery(<span class="string">&quot;categoryType&quot;</span>, searchReqVo.getCategoryType()));</span><br><span class="line">        &#125;</span><br><span class="line">        searchQueryBuilder.withQuery(boolQueryBuilder);</span><br><span class="line">  			<span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(searchReqVo.getOrderType()) &amp;&amp; !OrderTypeEnum.ALL.getCode()</span><br><span class="line">                .equals(searchReqVo.getOrderType())) &#123;</span><br><span class="line">            FieldSortBuilder fieldSortBuilder = SortBuilders</span><br><span class="line">                    .fieldSort(<span class="string">&quot;salePrice&quot;</span>)</span><br><span class="line">                    .order(SortOrder.DESC);</span><br><span class="line">            searchQueryBuilder.withSort(fieldSortBuilder);</span><br><span class="line">        &#125;	</span><br><span class="line">  			<span class="comment">//去重</span></span><br><span class="line">        searchQueryBuilder.addAggregation(AggregationBuilders.cardinality(<span class="string">&quot;spu_aggs&quot;</span>).field(<span class="string">&quot;spu.keyword&quot;</span>));</span><br><span class="line">        searchQueryBuilder.withCollapseField(<span class="string">&quot;spu.keyword&quot;</span>);</span><br><span class="line">        SearchHits&lt;MallProduct&gt; mallProductSearchHits = elasticsearchOperations</span><br><span class="line">                .search(searchQueryBuilder.build(), EsStageMallProduct.class,</span><br><span class="line">                        IndexCoordinates.of(<span class="string">&quot;mall_product&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> mallProductSearchHits;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>4.建index过程中出现analyzer没有生效的情况，这时需要在resource下增加mall_product_mapping.json文件，如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;productName&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在model中增加mapping</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document(indexName = &quot;mall_product&quot;, shards = 3, replicas = 2)</span></span><br><span class="line"><span class="meta">@Mapping(mappingPath = &quot;mall_product_mapping.json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallProduct</span> </span>&#123;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>elasticsearch</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot scheduled cron配置化</title>
    <url>/2020/11/03/springboot-scheduled-cron%E9%85%8D%E7%BD%AE%E5%8C%96/</url>
    <content><![CDATA[<p>需要在类上增加注解PropertySource</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:application-config.yml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;$&#123;cron&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importDbToEs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test cron time&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>scheduled</tag>
        <tag>cron</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot websocket redis 实现推送</title>
    <url>/2020/11/05/springboot-websocket-redis-%E5%AE%9E%E7%8E%B0%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<p>springboot，websocket及redis可以实现消息推送的功能，具体实现方法如下：</p>
<p>1.引入websocket和redis的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>2.创建ServerEndpointExporter 这个Bean使@ServerEndpoint注解生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsocketApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(WebsocketApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.redis配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;?, ?&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory,</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer) &#123;</span><br><span class="line">        RedisTemplate redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(stringRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RedisSerializer&lt;String&gt; <span class="title">stringRedisSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MessageListener <span class="title">webSocketRedisListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebSocketRedisListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MessageListenerAdapter <span class="title">webSocketRedisListenerAdapter</span><span class="params">(MessageListener webSocketRedisListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(webSocketRedisListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RedisMessageListenerContainer <span class="title">redisMessageListenerContainer</span><span class="params">(RedisTemplate redisTemplate,</span></span></span><br><span class="line"><span class="function"><span class="params">            MessageListenerAdapter webSocketRedisListenerAdapter)</span> </span>&#123;</span><br><span class="line">        RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(redisTemplate.getConnectionFactory());</span><br><span class="line">        container.addMessageListener(webSocketRedisListenerAdapter,</span><br><span class="line">                <span class="keyword">new</span> PatternTopic(Constants.LOGIN_CHANNEL_NAME));</span><br><span class="line">        container.addMessageListener(webSocketRedisListenerAdapter,</span><br><span class="line">                <span class="keyword">new</span> PatternTopic(Constants.LOGOUT_CHANNEL_NAME));</span><br><span class="line">        container.addMessageListener(webSocketRedisListenerAdapter,</span><br><span class="line">                <span class="keyword">new</span> PatternTopic(Constants.SEND_MESSAGE_CHANNEL_NAME));</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>redis工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTemplate</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        RedisUtils.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String channel, Object value)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().getOperations().convertAndSend(channel, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>redis监听类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketRedisListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(WebSocketRedisListener.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisSerializer&lt;String&gt; stringRedisSerializer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        String channel = stringRedisSerializer.deserialize(message.getChannel());</span><br><span class="line">        String value = stringRedisSerializer.deserialize(message.getBody());</span><br><span class="line">        <span class="comment">//登入登出是为了记录当前用户集合</span></span><br><span class="line">        <span class="keyword">if</span> (Constants.LOGIN_CHANNEL_NAME.equals(channel)) &#123;</span><br><span class="line">            String user = value;</span><br><span class="line">            logger.info(<span class="string">&quot;用户:&quot;</span> + user + <span class="string">&quot;登录&quot;</span>);</span><br><span class="line">            logger.info(<span class="string">&quot;本机用户集合:&quot;</span> + Constants.userWebSocketServerSetMap.keySet());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Constants.LOGOUT_CHANNEL_NAME.equals(channel)) &#123;</span><br><span class="line">            String user = value;</span><br><span class="line">            logger.info(<span class="string">&quot;用户:&quot;</span> + user + <span class="string">&quot;退出&quot;</span>);</span><br><span class="line">            logger.info(<span class="string">&quot;本机用户集合:&quot;</span> + Constants.userWebSocketServerSetMap.keySet());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Constants.SEND_MESSAGE_CHANNEL_NAME.equals(channel)) &#123;</span><br><span class="line">            <span class="comment">// 向客户端发送消息</span></span><br><span class="line">            SocketMessage socketMessage = JSON.parseObject(value, SocketMessage.class);</span><br><span class="line">            String userId = socketMessage.getUsrId();</span><br><span class="line">            Set&lt;String&gt; webSocketLoginUserSet = Constants.userWebSocketServerSetMap.keySet();</span><br><span class="line">            <span class="keyword">if</span> (webSocketLoginUserSet.contains(userId)) &#123;</span><br><span class="line">                Set&lt;WebSocketServer&gt; webSocketServerSet = Constants.userWebSocketServerSetMap.get(userId);</span><br><span class="line">                WebSocketServer latestWebSocketServer = <span class="keyword">null</span>;</span><br><span class="line">                Iterator&lt;WebSocketServer&gt; iterator = webSocketServerSet.iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    WebSocketServer webSocketServer = iterator.next();</span><br><span class="line">                    latestWebSocketServer = webSocketServer;</span><br><span class="line">                &#125;</span><br><span class="line">                latestWebSocketServer.sendMessage(socketMessage.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.常量类及消息实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String LOGIN_CHANNEL_NAME = <span class="string">&quot;login&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String LOGOUT_CHANNEL_NAME = <span class="string">&quot;logout&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String SEND_MESSAGE_CHANNEL_NAME = <span class="string">&quot;sendMessage&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, CopyOnWriteArraySet&lt;WebSocketServer&gt;&gt; userWebSocketServerSetMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String usrId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsrId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usrId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsrId</span><span class="params">(String usrId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.usrId = usrId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.websocke的具体实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/webSocketServer/&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String currentUserId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(<span class="meta">@PathParam(&quot;userId&quot;)</span> String userId, Session session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        currentUserId = userId;</span><br><span class="line">        <span class="keyword">if</span> (Constants.userWebSocketServerSetMap.get(userId) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CopyOnWriteArraySet&lt;WebSocketServer&gt; webSocketServerSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">            webSocketServerSet.add(<span class="keyword">this</span>);</span><br><span class="line">            Constants.userWebSocketServerSetMap.put(userId, webSocketServerSet);</span><br><span class="line"></span><br><span class="line">            RedisUtils.send(Constants.LOGIN_CHANNEL_NAME, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Constants.userWebSocketServerSetMap.get(userId).add(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String userId = currentUserId;</span><br><span class="line">        CopyOnWriteArraySet&lt;WebSocketServer&gt; webSocketServerSet = Constants.userWebSocketServerSetMap.get(userId);</span><br><span class="line">        webSocketServerSet.remove(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (webSocketServerSet.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            Constants.userWebSocketServerSetMap.remove(userId);</span><br><span class="line">            RedisUtils.send(Constants.LOGOUT_CHANNEL_NAME, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.getBasicRemote().sendText(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.写一个简单的Controller进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsocketController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testWebsocket/&#123;userId&#125;/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testWebsocket</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> String userId, <span class="meta">@PathVariable(&quot;message&quot;)</span> String message)</span> </span>&#123;</span><br><span class="line">        SocketMessage socketMessage = <span class="keyword">new</span> SocketMessage();</span><br><span class="line">        socketMessage.setUsrId(userId);</span><br><span class="line">        socketMessage.setMessage(message);</span><br><span class="line">        RedisUtils.send(Constants.SEND_MESSAGE_CHANNEL_NAME, JSON.toJSONString(socketMessage));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以通过<a href="http://www.websocket-test.com/">http://www.websocket-test.com</a> 充当客户端连接</p>
<p>向客户端发送消息推送</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9090/testWebsocket/123/第一条Websocket</span><br></pre></td></tr></table></figure>

<p>测试结果如下图</p>
<p><img src="https://i.loli.net/2020/11/06/uq1HbDi7yjC4O5J.png" alt="image.png"></p>
<p>code见 <a href="https://github.com/leaoway/websocket">https://github.com/leaoway/websocket</a></p>
]]></content>
  </entry>
  <entry>
    <title>springboot外部tomcat部署配置</title>
    <url>/2020/11/02/springboot%E5%A4%96%E9%83%A8tomcat%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>1.pom增加配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>2.pom打包方式由jar改为war</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3.Application类继承SpringBootServletInitializer，重新配置，类似于web.xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(Application.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>springboot</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>spring通过注解自定义参数解析器获取公共信息</title>
    <url>/2020/11/03/spring%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%85%AC%E5%85%B1%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>好多时候调用接口都需要一些公共的信息，例如用户信息，每次都需要在controller去调用查询，还有好多通过继承一个BaseController来获取，但是那样设计是不是比较重，这里可以通过自定义参数解析器的方式去获取。</p>
<p>定义一个注解UserBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UserBean &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>定义UserInfo公共信息类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义参数接卸器UserBeanResolver，继承HandlerMethodArgumentResolver，重写supportsParameter和resolveArgument方法，在resolveArgument方法中获取userInfo信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBeanResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter methodParameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> methodParameter.getParameterAnnotation(UserBean.class) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        UserInfo userInfo = UserInfo.builder().id(<span class="number">1L</span>).userName(<span class="string">&quot;哈哈&quot;</span>).age(<span class="number">22</span>).sex(<span class="string">&quot;male&quot;</span>).build();</span><br><span class="line">        <span class="keyword">return</span> userInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将UserBeanResolver注册到spring组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> </span>&#123;</span><br><span class="line">        argumentResolvers.add(getUserBeanResolver());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> UserBeanResolver <span class="title">getUserBeanResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBean(UserBeanResolver.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;userInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getUserInfo</span><span class="params">(<span class="meta">@UserBean</span> UserInfo userInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果，访问<a href="http://localhost:8080/userInfo">http://localhost:8080/userInfo</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;userName&quot;</span>: <span class="string">&quot;哈哈&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sex&quot;</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码见<a href="https://github.com/leaoway/user-resolver">https://github.com/leaoway/user-resolver</a></p>
]]></content>
      <tags>
        <tag>spring</tag>
        <tag>参数解析器</tag>
      </tags>
  </entry>
  <entry>
    <title>资源自动关闭接口AutoCloseable</title>
    <url>/2020/11/02/%E8%B5%84%E6%BA%90%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E6%8E%A5%E5%8F%A3AutoCloseable/</url>
    <content><![CDATA[<p>  jdk1.7引入了资源自动关闭的接口AutoCloseable。一些资源也实现了该接口，如preparedStatement、Connection、InputStream、outputStream等等资源接口。在使用的时候只需要把资源在try块中用小括号括起来就可以了。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">&quot;select 1 from dual&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> (PreparedStatement pstmt = toConn.prepareStatement(sql);</span><br><span class="line">    ResultSet rs = pstmt.executeQuery();) &#123;</span><br><span class="line">    <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;查询出错&quot;</span>, e);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AutoCloseable</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
